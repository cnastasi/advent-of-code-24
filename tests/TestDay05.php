<?php

namespace DevDojo;

use DevDojo\Day05\Exercise02;
use DevDojo\Day05\Exercise01;
use DevDojo\Day05\Support\RuleEngine;
use PHPUnit\Framework\Assert;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\TestCase;

class TestDay05 extends TestCase
{
    const array RULES = [
        '47|53',
        '97|13',
        '97|61',
        '97|47',
        '75|29',
        '61|13',
        '75|53',
        '29|13',
        '97|29',
        '53|29',
        '61|53',
        '97|53',
        '61|29',
        '47|13',
        '75|47',
        '97|75',
        '47|61',
        '75|61',
        '47|29',
        '75|13',
        '53|13'
    ];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->ruleEngine = new RuleEngine();

        foreach (self::RULES as $rule) {
            $this->ruleEngine->addRule($rule);
        }
    }

    public static function dataProvider(): \Generator
    {
        yield [['75', '47', '61', '53', '29'], true];
        yield [['97', '61', '53', '29', '13'], true];
        yield [['75', '29', '13'], true];
        yield [['75', '97', '47', '61', '53'], false];
        yield [['61', '13', '29'], false];
        yield [['97', '13', '75', '29', '47'], false];
    }

    #[DataProvider('dataProvider')]
    public function test(array $paths, bool $expected): void
    {
        Assert::assertSame($this->ruleEngine->hasPath($paths), $expected);
    }

    public function test2()
    {
        $paths = [['75', '47', '61', '53', '29'],
            ['97', '61', '53', '29', '13'],
            ['75', '29', '13'],
            ['75', '97', '47', '61', '53'],
            ['61', '13', '29'],
            ['97', '13', '75', '29', '47']];

        $result = Exercise01::execute(self::RULES, $paths);

        Assert::assertSame(143, $result);
    }

    public function test3()
    {
        $paths = [['75', '47', '61', '53', '29'],
            ['97', '61', '53', '29', '13'],
            ['75', '29', '13'],
            ['75', '97', '47', '61', '53'],
            ['61', '13', '29'],
            ['97', '13', '75', '29', '47']];

        $result = Exercise02::execute(self::RULES, $paths);

        Assert::assertSame(123, $result);
    }

    public function testOrderByScore1()
    {
        $path = ['75', '97', '47', '61', '53'];

        $orderedPath = $this->ruleEngine->orderByScore($path);

        var_dump(implode(',', $path));
        // expected: 97,75,47,61,53
        var_dump(implode(',', $orderedPath));

        $result = $this->ruleEngine->hasPath($orderedPath);

        Assert::assertTrue($result);
    }

    public function testOrderByScore2()
    {
        $path = ['61', '13', '29'];

        $orderedPath = $this->ruleEngine->orderByScore($path);

        var_dump(implode(',', array_keys($orderedPath)));

        $result = $this->ruleEngine->hasPath($orderedPath);

        Assert::assertTrue($result);
    }

    public function testOrderByScore3()
    {
        $path = ['97', '13', '75', '29', '47'];

        $orderedPath = $this->ruleEngine->orderByScore($path);

        var_dump(implode(',', array_keys($orderedPath)));

        $result = $this->ruleEngine->hasPath($orderedPath);

        Assert::assertTrue($result);
    }

    public function testReal1()
    {
        $source = file_get_contents(__DIR__ . '/../assets/input_day_05.txt');

        [$rules, $paths] = explode("\n\n", $source);

        $rules = explode("\n", $rules);

        $paths = array_map(
            fn($path) => explode(',', $path),
            explode("\n", $paths)
        );

        $result = Exercise01::execute($rules, $paths);

        Assert::assertSame(6951, $result);
    }

    public function testReal2()
    {
        $source = file_get_contents(__DIR__ . '/../assets/input_day_05.txt');

        [$rules, $paths] = explode("\n\n", $source);

        $rules = explode("\n", $rules);

        $paths = array_map(
            fn($path) => explode(',', $path),
            explode("\n", $paths)
        );

        $result = Exercise02::execute($rules, $paths);

        Assert::assertSame(4787, $result);
    }


}